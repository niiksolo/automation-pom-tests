name: QA Tests Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: qa_tests_image
  IMAGE_TAG: latest
  REPORT_DIR: allure-report
  SITE_LOGIN: ${{ secrets.TEST_LOGIN }}
  SITE_PASSWORD: ${{ secrets.TEST_PASSWORD }}
  CI: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull or Build Docker image
        run: |
          if ! docker pull ghcr.io/${{ github.repository }}/$IMAGE_NAME:$IMAGE_TAG; then
            echo "Image not found, building..."
            docker build -t $IMAGE_NAME:$IMAGE_TAG .
            docker tag $IMAGE_NAME:$IMAGE_TAG ghcr.io/${{ github.repository }}/$IMAGE_NAME:$IMAGE_TAG
            docker push ghcr.io/${{ github.repository }}/$IMAGE_NAME:$IMAGE_TAG
          else
            echo "Image pulled successfully."
          fi

  smoke-tests:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v3
      - name: Run Smoke Tests
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker run --rm \
            -e SITE_LOGIN=${{ env.SITE_LOGIN }} \
            -e SITE_PASSWORD=${{ env.SITE_PASSWORD }} \
            -e CI=${{ env.CI }} \
            -v $PWD/allure-report:/app/allure-report \
            ghcr.io/${{ github.repository }}/$IMAGE_NAME:$IMAGE_TAG \
            sh -c "pytest tests/smoke --alluredir=allure-report --tb=short"

  integration-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - uses: actions/checkout@v3
      - name: Run Integration Tests
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker run --rm \
            -e SITE_LOGIN=${{ env.SITE_LOGIN }} \
            -e SITE_PASSWORD=${{ env.SITE_PASSWORD }} \
            -e CI=${{ env.CI }} \
            -v $PWD/allure-report:/app/allure-report \
            ghcr.io/${{ github.repository }}/$IMAGE_NAME:$IMAGE_TAG \
            sh -c "pytest tests/integration --alluredir=allure-report --tb=short"

  regression-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v3
      - name: Run Regression Tests
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker run --rm \
            -e SITE_LOGIN=${{ env.SITE_LOGIN }} \
            -e SITE_PASSWORD=${{ env.SITE_PASSWORD }} \
            -e CI=${{ env.CI }} \
            -v $PWD/allure-report:/app/allure-report \
            ghcr.io/${{ github.repository }}/$IMAGE_NAME:$IMAGE_TAG \
            sh -c "pytest tests/regression --alluredir=allure-report --tb=short"

  deploy-allure:
    runs-on: ubuntu-latest
    needs: [smoke-tests, integration-tests, regression-tests]
    steps:
      - uses: actions/checkout@v3

      - name: Copy Allure report to docs
        run: |
          rm -rf docs
          mkdir docs
          cp -r allure-report/allure-html/* docs/

      - name: Commit and push Allure HTML to docs
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add docs
          git commit -m "Update Allure report" || echo "No changes to commit"
          git push origin main

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs